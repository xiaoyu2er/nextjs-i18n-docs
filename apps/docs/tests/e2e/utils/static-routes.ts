import { blog, docs, learn } from '../../../src/lib/source';

export interface StaticRoute {
  url: string;
  params: Record<string, string | string[]>;
  type: 'docs' | 'blog' | 'learn';
}

/**
 * Extract all static routes that should be generated by generateStaticParams
 */
export function getAllStaticRoutes(): StaticRoute[] {
  const routes: StaticRoute[] = [];

  // Get docs routes - use the actual URLs from the source
  try {
    const docsPages = docs.getPages();
    for (const page of docsPages) {
      routes.push({
        url: page.url,
        params: { slug: page.slugs },
        type: 'docs',
      });
    }
  } catch (error) {
    console.error('Failed to get docs pages:', error);
  }

  // Get blog routes
  try {
    const blogPages = blog.getPages();
    for (const page of blogPages) {
      routes.push({
        url: page.url,
        params: { slug: page.slugs },
        type: 'blog',
      });
    }
  } catch (error) {
    console.error('Failed to get blog pages:', error);
  }

  // Get learn routes - use the actual URLs from the source
  try {
    const learnPages = learn.getPages();
    for (const page of learnPages) {
      routes.push({
        url: page.url,
        params: { slug: page.slugs },
        type: 'learn',
      });
    }
  } catch (error) {
    console.error('Failed to get learn pages:', error);
  }

  return routes;
}

/**
 * Group routes by type for easier testing
 */
export function getRoutesByType() {
  const allRoutes = getAllStaticRoutes();

  return {
    '/docs/13': allRoutes.filter(
      (route) => route.type === 'docs' && route.url.startsWith('/docs/13'),
    ),
    '/docs/14': allRoutes.filter(
      (route) => route.type === 'docs' && route.url.startsWith('/docs/14'),
    ),
    '/docs': allRoutes.filter(
      (route) =>
        route.type === 'docs' &&
        !route.url.startsWith('/docs/13') &&
        !route.url.startsWith('/docs/14'),
    ),
    '/blog': allRoutes.filter((route) => route.type === 'blog'),
    '/learn': allRoutes.filter((route) => route.type === 'learn'),
  };
}
