import { blog, docs, learn } from '../../../src/lib/source';

export interface StaticRoute {
  url: string;
  params: Record<string, string | string[]>;
  type: 'docs' | 'blog' | 'learn';
}

/**
 * Extract all static routes that should be generated by generateStaticParams
 */
export function getAllStaticRoutes(): StaticRoute[] {
  const routes: StaticRoute[] = [];

  // Get docs routes - use the actual URLs from the source
  try {
    const docsPages = docs.getPages();
    for (const page of docsPages) {
      routes.push({
        url: page.url,
        params: { slug: page.slugs },
        type: 'docs',
      });
    }
  } catch (error) {
    console.error('Failed to get docs pages:', error);
  }

  // Get blog routes
  try {
    const blogPages = blog.getPages();
    for (const page of blogPages) {
      routes.push({
        url: page.url,
        params: { slug: page.slugs },
        type: 'blog',
      });
    }
  } catch (error) {
    console.error('Failed to get blog pages:', error);
  }

  // Get learn routes - use the actual URLs from the source
  try {
    const learnPages = learn.getPages();
    for (const page of learnPages) {
      routes.push({
        url: page.url,
        params: { slug: page.slugs },
        type: 'learn',
      });
    }
  } catch (error) {
    console.error('Failed to get learn pages:', error);
  }

  return routes;
}

/**
 * Group routes by type for easier testing
 */
export function getRoutesByType() {
  const allRoutes = getAllStaticRoutes();

  return {
    docs: allRoutes.filter((route) => route.type === 'docs'),
    blog: allRoutes.filter((route) => route.type === 'blog'),
    learn: allRoutes.filter((route) => route.type === 'learn'),
    all: allRoutes,
  };
}

/**
 * Get a sample of routes for quick testing
 */
export function getSampleRoutes(limit = 10): StaticRoute[] {
  const routes = getAllStaticRoutes();

  // Get a balanced sample from each type
  const sampleSize = Math.ceil(limit / 3);
  const routesByType = getRoutesByType();

  return [
    ...routesByType.docs.slice(0, sampleSize),
    ...routesByType.blog.slice(0, sampleSize),
    ...routesByType.learn.slice(0, sampleSize),
  ].slice(0, limit);
}

/**
 * Clean URL by removing fragments that might cause navigation issues
 */
export function cleanUrl(url: string): string {
  // Remove URL fragments (#) that can cause timeouts in tests
  return url.split('#')[0];
}

/**
 * Check if a URL has fragments that might cause navigation issues
 */
export function hasUrlFragments(url: string): boolean {
  return url.includes('#');
}

/**
 * Get routes suitable for e2e testing (clean URLs without fragments)
 */
export function getTestableRoutes(): StaticRoute[] {
  return getAllStaticRoutes().map((route) => ({
    ...route,
    url: cleanUrl(route.url),
  }));
}
