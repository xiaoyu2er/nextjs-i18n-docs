name: "Translate Documentation Action"
description: "Translates documentation files automatically using AI"

inputs:
  list_only:
    description: "Only list file status without updating docs"
    required: false
    default: "false"
  target_language:
    description: "Specify the target language code for translation (e.g., 'zh-hans', 'fr', 'es')"
    required: false
    default: ""
  pattern:
    description: "File pattern to match for updating (e.g., '*.mdx' or 'docs/**/*.mdx')"
    required: false
    default: ""
  max_files:
    description: "Maximum number of files to process in one batch (per language)"
    required: false
    default: ""
  concurrency:
    description: "Number of concurrent translation tasks"
    required: false
    default: ""
  model:
    description: "DeepSeek model to use: 'deepseek-chat' or 'deepseek-reasoner'"
    required: false
    default: ""
  custom_arguments:
    description: "Additional custom arguments to pass to the translation package command"
    required: false
    default: ""
  github_token:
    description: "GitHub token for creating PRs"
    required: false
    default: ${{ github.token }}
  api_key:
    description: "API key for translation service (e.g., OPENAI_API_KEY)"
    required: true
  translation_command:
    description: "command to use for translation"
    required: false
    default: "pnpm run translate"
  base_branch:
    description: "Base branch to create PR against"
    required: false
    default: "main"
  pr_branch:
    description: "Branch name for the PR"
    required: false
    default: "docs/update-translations"
  pr_title:
    description: "Title for the PR"
    required: false
    default: "Update translations"
  pr_body:
    description: "Body text for the PR"
    required: false
    default: |
      This PR updates the documentation translations automatically.

      Generated by the translate workflow.
  commit_message:
    description: "Commit message for the translation changes"
    required: false
    default: "docs: update documentation translations"
  schedule_cron:
    description: "Cron schedule for automatic translation (used in workflow template)"
    required: false
    default: "0 20 * * *"
  add_paths:
    description: "A comma or newline-separated list of file paths to commit. Paths should follow git's pathspec syntax."
    required: false
    default: "apps/docs/content/**"
  enable_formatting:
    description: "Whether to run code formatting before creating the PR"
    required: false
    default: "true"
  format_command:
    description: "The command to run for formatting code"
    required: false
    default: "pnpm prettier:write"

runs:
  using: "composite"
  steps:
    - name: Check if repository is already checked out
      id: check_repo
      shell: bash
      run: |
        if [ -d ".git" ]; then
          echo "already_checked_out=true" >> $GITHUB_OUTPUT
        else
          echo "already_checked_out=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout code
      if: steps.check_repo.outputs.already_checked_out != 'true'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Fetch all history for proper timestamp lookup

    - name: Check if PR branch already exists
      id: check_branch
      shell: bash
      run: |
        if git ls-remote --heads origin ${{ inputs.pr_branch }} | grep -q ${{ inputs.pr_branch }}; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    - name: Setup Tools
      if: steps.check_branch.outputs.exists == 'false'
      uses: ./.github/actions/setup
    
    - name: Build packages
      if: steps.check_branch.outputs.exists == 'false'
      uses: ./.github/actions/build-translate-package

    - name: Run translation
      if: steps.check_branch.outputs.exists == 'false'
      shell: bash
      run: |
        # Build command with individual arguments
        COMMAND="${{ inputs.translation_command }}"
        
        if [ "${{ inputs.list_only }}" = "true" ]; then
          COMMAND="$COMMAND --list-only"
        fi
        
        if [ -n "${{ inputs.target_language }}" ]; then
          COMMAND="$COMMAND --target-language ${{ inputs.target_language }}"
        fi
        
        if [ -n "${{ inputs.pattern }}" ]; then
          COMMAND="$COMMAND --pattern ${{ inputs.pattern }}"
        fi
        
        if [ -n "${{ inputs.max_files }}" ]; then
          COMMAND="$COMMAND --max ${{ inputs.max_files }}"
        fi
        
        if [ -n "${{ inputs.concurrency }}" ]; then
          COMMAND="$COMMAND --concurrency ${{ inputs.concurrency }}"
        fi
        
        if [ -n "${{ inputs.model }}" ]; then
          COMMAND="$COMMAND --model ${{ inputs.model }}"
        fi
        
        if [ -n "${{ inputs.custom_arguments }}" ]; then
          COMMAND="$COMMAND ${{ inputs.custom_arguments }}"
        fi
        
        echo "Running translation command: $COMMAND"
        eval $COMMAND
      env:
        OPENAI_API_KEY: ${{ inputs.api_key }}

    - name: Check for modifications
      if: steps.check_branch.outputs.exists == 'false'
      id: check-changes
      shell: bash
      run: |
        if [[ $(git status --porcelain | wc -l) -gt 0 ]]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected. Will proceed with formatting and commit."
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected after translation. Exiting workflow."
        fi

    - name: Fix formatting
      if: steps.check_branch.outputs.exists == 'false' && steps.check-changes.outputs.has_changes == 'true' && inputs.enable_formatting == 'true'
      shell: bash
      run: ${{ inputs.format_command }}

    - name: Create Pull Request
      if: steps.check_branch.outputs.exists == 'false' && steps.check-changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ inputs.github_token }}
        commit-message: ${{ inputs.commit_message }}
        title: ${{ inputs.pr_title }}
        body: ${{ inputs.pr_body }}
        branch: ${{ inputs.pr_branch }}
        delete-branch: true
        base: ${{ inputs.base_branch }}
        add-paths: ${{ inputs.add_paths }}

branding:
  icon: "globe"
  color: "blue"
